CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Kaytlin Melvin

Problem 6.

(a) Fibonacci failed the testThrowsIllegalArgumentException test because the
    original code (n <= 0) considered 0 in their negative number case. In order
    to fix this I changed the if statement condition to (n < 0).


(b) Fibonacci failed the testBaseCase test because the original statement (n <= 2)
    accounts for 2 to be included as a Base Case. In order to change this, I changed
    the if statement condition to (n < 2).


(c) Fibonacci failed the testInductiveCase test because the definition of a Fibonacci
    number is the sum of all the previous numbers. The issue with the original code was
    that it returned the difference of all the previous numbers. I fixed it by changing
    the code to addition instead of subtraction.


Problem 7. 

1. The first problem with Ball.java is that the getVolume method returns 0 when it should
    return the volume variable value. The second problem is that because volume is initialized
    as private, when referenced in the Ball method, it must this.volume = volume. For the
    getVolume() method I used approach 2, keeping track of the volume each time a ball is
    added or removed. I chose this approach because it made the getVolume() method
    easier to read and clearer as a result of not having to complete any computations
    when the method is called.

2. Two ways to implement getBallsFromSmallest() are using a Map and ArrayList combination
   or using a Comparator and ArrayList. I used a Map of the volumes of the ball as the key and
   the corresponding Ball b as the value and ArrayList of just the volumes. From there, it sorts
   the ArrayList of volumes using Collections sort. Then it adds to the returned ArrayList
   by adding the Map Ball b value from the volume value returned from the sorted volumes ArrayList.
   The second approach takes an array of balls and sorts accordingly as a result of using a
   comparator method.

   The first implementation is better than the second in respects to there are no comparisons or
   sorting algorithms actually being executed within the method. It takes advantage of the
   collections sort. The second implementation is better than the first implementation in respects
   to it uses less data structures and physical memory by only using one array and not any
   accessory arrays.



